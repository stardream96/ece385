module ripple_adder
(
    input   logic[7:0]     B,
    input   logic[7:0]     S,
    output  logic[7:0]     Aval,
	 output  logic[7:0]     Bval,
    output  logic          X
);

    // TODO

	logic [7:0] M
	for i in 0 to 7 loop
		if M[i] begin
			eight_bit_ra add(.x(A[7:0]), .y(S[7:0]), .cin(0), .s(A[7:0]), .cout(X))
		else
		end
		XAB_shifter shift(.A(A[7:0]), .B(B[7:0]), .X(X), .AO(A[7:0]), .BO(B[7:0]), .XO(X),)
endmodule

module multiplier_processor(
						input [7:0] A,
						input [7:0] B,
						input X,
						output logic [7:0] AO,
						output logic [7:0] BO,
						output logic XO
						);

	assign X = B[0]
	assign A = {X,A[7:1]}
	assign B = {A[0],B[7:1],}

endmodule

module XAB_shifter(
						input [7:0] A,
						input [7:0] B,
						input X,
						output logic [7:0] AO,
						output logic [7:0] BO,
						output logic XO
						);

	assign X = B[0]
	assign A = {X,A[7:1]}
	assign B = {A[0],B[7:1],}

endmodule

module eight_bit_ra(
						input [7:0] x,
						input [7:0] y,
						input cin,
						output logic [7:0] s,
						output logic cout
						);

	logic c0;
	
	  four_bit_ra FRA0(.x(A[3:0]), .y(B[3:0]), .cin(0), .s(Sum[3:0]), .cout(c0));
	  four_bit_ra FRA1(.x(A[7:4]), .y(B[7:4]), .cin(c0), .s(Sum[7:4]), .cout(cout));

endmodule

module four_bit_ra(
						input [3:0] x,
						input [3:0] y,
						input cin,
						output logic [3:0] s,
						output logic cout
						);

	logic c0, c1, c2;
	
	full_adder fa0(.x(x[0]), .y(y[0]), .cin(cin), .s(s[0]), .cout(c0));
	full_adder fa1(.x(x[1]), .y(y[1]), .cin(c0), .s(s[1]), .cout(c1));
	full_adder fa2(.x(x[2]), .y(y[2]), .cin(c1), .s(s[2]), .cout(c2));
	full_adder fa3(.x(x[3]), .y(y[3]), .cin(c2), .s(s[3]), .cout(cout));

endmodule


module full_adder(
						input x,
						input y,
						input cin,
						output logic s,
						output logic cout
						);

	assign s = x^y^cin;
	assign cout = (x&y) | (y&cin) | (cin&x);
	


endmodule
